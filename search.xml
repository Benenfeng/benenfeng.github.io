<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>怎么更新 wireshark 中 F1AP, E1AP 和 XnAP 协议</title>
      <link href="/2020/09/22/update-wireshark-to-support-the-latest-f1ap/"/>
      <url>/2020/09/22/update-wireshark-to-support-the-latest-f1ap/</url>
      
        <content type="html"><![CDATA[<p>在研究和实现协议时，我有时候需要借助 Wireshark 来帮我们分析协议报文。而对于很新而且持续在进行较大更新的协议，例如 5G 中的 XnAP, F1AP, E1AP 等协议 （基于 ASN.1 编码），3GPP 基本每个季度就会更新一次，而 Wireshark 对它们的支持可能没有那么快，但是由于我们学习或者工作的需要又需要使用最新的协议版本，所以就需要我们自己更新 wireshark 来支持最新的 F1AP 等协议。具体操作步骤如下：</p><ul><li><ol><li>配置 wireshark 编译环境</li></ol></li><li><ol start="2"><li>更新 ASN.1 文件</li></ol></li><li><ol start="3"><li>更新 f1ap.cnf 和 template-f1ap.c </li></ol></li><li><ol start="4"><li>生成 packet-f1ap.c 文件</li></ol></li><li><ol start="5"><li>编译，运行测试</li></ol></li></ul><h4 id="1-配置-wireshark-编译环境"><a href="#1-配置-wireshark-编译环境" class="headerlink" title="1 配置 wireshark 编译环境"></a>1 配置 wireshark 编译环境</h4><p>对于 wireshark 的编译环境，我采用的 Ubuntu 16.04 系统， 具体的操作步骤可以参考我另一篇分享 <a href="http://benenfeng.com/2019/08/10/build-wireshark/">Ubuntu 16.04 下源码编译运行wireshark</a></p><h4 id="2-更新-ASN-1-文件"><a href="#2-更新-ASN-1-文件" class="headerlink" title="2 更新 ASN.1 文件"></a>2 更新 ASN.1 文件</h4><p>对于 F1AP, E1AP, XnAP 等 5G 接入网协议 采用的 ASN.1 PER 编码方式， 3GPP 组织在发布协议文档的时候会一起更新 ASN.1。 我们按照章节将 TS 38.473 中的 ASN.1 拷贝出来，存成以下文件。</p><ul><li>F1AP-CommonDataTypes.asn</li><li>F1AP-Constants.asn</li><li>F1AP-Containers.asn</li><li>F1AP-IEs.asn</li><li>F1AP-PDU-Contents.asn</li><li>F1AP-PDU-Descriptions.asn</li></ul><p>我们将上面这几个文件替换掉 wireshark/epan/dissectors/asn1/f1ap/ 下的同名文件。</p><h4 id="3-更新-f1ap-cnf-和-packet-f1ap-template-c"><a href="#3-更新-f1ap-cnf-和-packet-f1ap-template-c" class="headerlink" title="3 更新 f1ap.cnf 和 packet-f1ap-template.c"></a>3 更新 f1ap.cnf 和 packet-f1ap-template.c</h4><p>更新 f1ap.cnf 和 packet-f1ap-template.c 是整个更新中最重要的环节， 具体步骤如下：</p><ul><li>添加新的 Procedure 和 Message</li><li>添加新的 Information Element</li><li>添加更详细的解析</li></ul><h5 id="3-1-添加新的-Procedure-和-Message"><a href="#3-1-添加新的-Procedure-和-Message" class="headerlink" title="3.1 添加新的 Procedure 和 Message"></a>3.1 添加新的 Procedure 和 Message</h5><p>更新procedure 和 相应的 message 步骤如下： </p><p>1 添加 procedure ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">id-TraceStart                               ProcedureCode </span><br><span class="line">id-DeactivateTrace                          ProcedureCode </span><br><span class="line">id-DUCURadioInformationTransfer             ProcedureCode </span><br><span class="line">id-CUDURadioInformationTransfer             ProcedureCode </span><br><span class="line">id-BAPMappingConfiguration                  ProcedureCode </span><br><span class="line">id-GNBDUResourceConfiguration               ProcedureCode </span><br><span class="line">id-IABTNLAddressAllocation                  ProcedureCode</span><br><span class="line">id-IABUPConfigurationUpdate                 ProcedureCode </span><br><span class="line">id-resourceStatusReportingInitiation        ProcedureCode </span><br><span class="line">id-resourceStatusReporting                  ProcedureCode </span><br><span class="line">id-accessAndMobilityIndication              ProcedureCode </span><br><span class="line">id-accessSuccess                            ProcedureCode </span><br><span class="line">id-cellTrafficTrace                         ProcedureCode</span><br></pre></td></tr></table></figure><p>2 绑定 message 和 procedure 和 消息类型：initiate, successful or failure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TraceStart                          N f1ap.proc.imsg   id-TraceStart  </span><br><span class="line">DeactivateTrace                     N f1ap.proc.imsg   id-DeactivateTrace</span><br><span class="line">CellTrafficTrace                    N f1ap.proc.imsg   id-cellTrafficTrace</span><br><span class="line"></span><br><span class="line">DUCURadioInformationTransfer         N f1ap.proc.imsg   id-DUCURadioInformationTransfer </span><br><span class="line">CUDURadioInformationTransfer         N f1ap.proc.imsg   id-CUDURadioInformationTransfer</span><br><span class="line"></span><br><span class="line">BAPMappingConfiguration          N f1ap.proc.imsg      id-BAPMappingConfiguration  </span><br><span class="line">BAPMappingConfigurationAcknowledge   N f1ap.proc.sout   id-BAPMappingConfiguration  </span><br><span class="line">GNBDUResourceConfiguration           N f1ap.proc.imsg   id-GNBDUResourceConfiguration</span><br><span class="line">GNBDUResourceConfigurationAcknowledge   N f1ap.proc.sout    id-GNBDUResourceConfiguration</span><br><span class="line">IABTNLAddressRequest               N f1ap.proc.imsg    id-IABTNLAddressAllocation</span><br><span class="line">IABTNLAddressResponse              N f1ap.proc.sout    id-IABTNLAddressAllocation</span><br><span class="line">IABUPConfigurationUpdateRequest    N f1ap.proc.imsg id-IABUPConfigurationUpdate </span><br><span class="line">IABUPConfigurationUpdateResponse   N f1ap.proc.sout     id-IABUPConfigurationUpdate </span><br><span class="line">IABUPConfigurationUpdateFailure    N f1ap.proc.uout          id-IABUPConfigurationUpdate </span><br><span class="line"></span><br><span class="line">ResourceStatusRequest               N f1ap.proc.imsg    id-resourceStatusReportingInitiation</span><br><span class="line">ResourceStatusResponse              N f1ap.proc.sout                      id-resourceStatusReportingInitiation</span><br><span class="line">ResourceStatusFailure               N f1ap.proc.uout                  id-resourceStatusReportingInitiation</span><br><span class="line">ResourceStatusUpdate                 N f1ap.proc.imsg   id-resourceStatusReporting </span><br><span class="line"></span><br><span class="line">AccessAndMobilityIndication          N f1ap.proc.imsg   id-accessAndMobilityIndication </span><br><span class="line"></span><br><span class="line">AccessSuccess                        N f1ap.proc.imsg   id-accessSuccess</span><br></pre></td></tr></table></figure><p>3 添加 <code>col_append_sep_str</code> </p><p><code>col_append_sep_str</code> 的具体作用可以参考 Wirehsark 中 README.dissector 文件中 1.4.7 章节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#.FN_HDR TraceStart</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;TraceStart&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR DeactivateTrace</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;DeactivateTrace&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR CellTrafficTrace</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;CellTrafficTrace&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR DUCURadioInformationTransfer</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;DUCURadioInformationTransfer&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR CUDURadioInformationTransfer</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;CUDURadioInformationTransfer&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR BAPMappingConfiguration</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;BAPMappingConfiguration&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR BAPMappingConfigurationAcknowledge</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;BAPMappingConfigurationAcknowledge&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR GNBDUResourceConfiguration</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;GNBDUResourceConfiguration&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR GNBDUResourceConfigurationAcknowledge</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;GNBDUResourceConfigurationAcknowledge&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR IABTNLAddressRequest</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;IABTNLAddressRequest&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR IABTNLAddressResponse</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;IABTNLAddressResponse&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR IABUPConfigurationUpdateRequest</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;IABUPConfigurationUpdateRequest&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR IABUPConfigurationUpdateResponse</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;IABUPConfigurationUpdateResponse&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR IABUPConfigurationUpdateFailure</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;IABUPConfigurationUpdateFailure&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR ResourceStatusRequest</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;ResourceStatusRequest&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR ResourceStatusResponse</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;ResourceStatusResponse&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR ResourceStatusFailure</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;ResourceStatusFailure&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR ResourceStatusUpdate</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;ResourceStatusUpdate&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR AccessAndMobilityIndication</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;AccessAndMobilityIndication&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR AccessSuccess</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;AccessSuccess&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR ReferenceTimeInformationReportingControl</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;ReferenceTimeInformationReportingControl&quot;);</span><br><span class="line">#.END</span><br><span class="line">#.FN_HDR ReferenceTimeInformationReport</span><br><span class="line">col_append_sep_str(actx-&gt;pinfo-&gt;cinfo, COL_INFO, NULL, &quot;ReferenceTimeInformationReport&quot;);</span><br><span class="line">#.END</span><br></pre></td></tr></table></figure><h5 id="3-2-添加新的-Information-Element"><a href="#3-2-添加新的-Information-Element" class="headerlink" title="3.2 添加新的 Information Element"></a>3.2 添加新的 Information Element</h5><p>每个 message 是由一个个 Information Element (IE) 组成的，所以还需要添加具体的 IE。步骤如下：</p><ol><li>添加ID </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">截取部分IE ID</span><br><span class="line">id-BAPAddress                                       ProtocolIE-ID</span><br><span class="line">id-ConfiguredBAPAddress                             ProtocolIE-ID</span><br><span class="line">id-BH-Routing-Information-Added-List                ProtocolIE-ID</span><br><span class="line">id-BH-Routing-Information-Added-List-Item           ProtocolIE-ID</span><br><span class="line">id-BH-Routing-Information-Removed-List              ProtocolIE-ID</span><br><span class="line">id-BH-Routing-Information-Removed-List-Item         ProtocolIE-ID</span><br><span class="line">id-UL-BH-Non-UP-Traffic-Mapping                     ProtocolIE-ID</span><br><span class="line">id-Activated-Cells-to-be-Updated-List               ProtocolIE-ID</span><br><span class="line">id-Child-Nodes-List                                 ProtocolIE-ID</span><br><span class="line">id-IAB-Info-IAB-DU                                  ProtocolIE-ID</span><br><span class="line">id-IAB-Info-IAB-donor-CU                            ProtocolIE-ID</span><br><span class="line">id-IAB-TNL-Addresses-To-Remove-List                 ProtocolIE-ID</span><br></pre></td></tr></table></figure><p>2 绑定 ID 与 IE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">截取部分</span><br><span class="line">TraceActivation                                   N f1ap.ies id-TraceActivation                                  </span><br><span class="line">TraceID                                           N f1ap.ies id-TraceID                                          </span><br><span class="line">Neighbour-Cell-Information-List                   N f1ap.ies id-Neighbour-Cell-Information-List                  </span><br><span class="line">SymbolAllocInSlot                                 N f1ap.ies id-SymbolAllocInSlot                                </span><br><span class="line">NumDLULSymbols                                    N f1ap.ies id-NumDLULSymbols                                   </span><br><span class="line">AdditionalRRMPriorityIndex                        N f1ap.ies id-AdditionalRRMPriorityIndex                       </span><br><span class="line">DUCURadioInformationType                          N f1ap.ies id-DUCURadioInformationType                         </span><br><span class="line">CUDURadioInformationType                          N f1ap.ies id-CUDURadioInformationType</span><br><span class="line"></span><br><span class="line">QoSParaSetNotifyIndex                            N f1ap.extension id-CurrentQoSParaSetIndex</span><br></pre></td></tr></table></figure><h5 id="3-3-添加更详细的解析"><a href="#3-3-添加更详细的解析" class="headerlink" title="3.3 添加更详细的解析"></a>3.3 添加更详细的解析</h5><p>除了ASN.1 本身模型的解析，如果你对一些域的解析有更细化的要求，你也可以添加自己的解析。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#.FN_BODY TransportLayerAddress VAL_PTR &#x3D; &amp;param_tvb</span><br><span class="line">  tvbuff_t *param_tvb &#x3D; NULL;</span><br><span class="line">%(DEFAULT_BODY)s</span><br><span class="line">  if (param_tvb) &#123;</span><br><span class="line">    proto_tree *subtree;</span><br><span class="line">    gint tvb_len;</span><br><span class="line"></span><br><span class="line">    tvb_len &#x3D; tvb_reported_length(param_tvb);</span><br><span class="line">    subtree &#x3D; proto_item_add_subtree(actx-&gt;created_item, ett_f1ap_TransportLayerAddress);</span><br><span class="line">    if (tvb_len &#x3D;&#x3D; 4) &#123;</span><br><span class="line">      &#x2F;* IPv4 *&#x2F;</span><br><span class="line">       proto_tree_add_item(subtree, hf_f1ap_transportLayerAddressIPv4, param_tvb, 0, 4, ENC_BIG_ENDIAN);</span><br><span class="line">    &#125; else if (tvb_len &#x3D;&#x3D; 16) &#123;</span><br><span class="line">      &#x2F;* IPv6 *&#x2F;</span><br><span class="line">       proto_tree_add_item(subtree, hf_f1ap_transportLayerAddressIPv6, param_tvb, 0, 16, ENC_NA);</span><br><span class="line">    &#125; else if (tvb_len &#x3D;&#x3D; 20) &#123;</span><br><span class="line">      &#x2F;* IPv4 *&#x2F;</span><br><span class="line">       proto_tree_add_item(subtree, hf_f1ap_transportLayerAddressIPv4, param_tvb, 0, 4, ENC_BIG_ENDIAN);</span><br><span class="line">      &#x2F;* IPv6 *&#x2F;</span><br><span class="line">       proto_tree_add_item(subtree, hf_f1ap_transportLayerAddressIPv6, param_tvb, 4, 16, ENC_NA);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上例中 <code>TransportLayerAddress ::= BIT STRING (SIZE(1..160, ...))</code> 是一个 1 到 20 字节长度的域，实际一般会赋值为4字节 (IPv4)，16字节(IPv6) 和20字节 (IPv4 + IPv6)。如果按照 ASN.1 直接解析成BIT_STRING 会很不直观，所以根据需要可以添加自己的解析。</p><h4 id="4-生成-packet-f1ap-c-文件"><a href="#4-生成-packet-f1ap-c-文件" class="headerlink" title="4 生成 packet-f1ap.c 文件"></a>4 生成 packet-f1ap.c 文件</h4><p>经过上面的准备工作，我们下面要生成 wireshark 真正需要编译时使用的源码文件 packet-f1ap.c </p><p>首先我们将目录 /wireshark/tools/ 下的 asn2wrs.py 文件 拷贝到 wireshark/epan/dissectors/asn1/f1ap/ 下</p><p>然后运行下面的Python命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python asn2wrs.py -p f1ap -c ./f1ap.cnf -s ./packet-f1ap-template -D . -O ../.. F1AP-CommonDataTypes.asn F1AP-Constants.asn F1AP-Containers.asn F1AP-IEs.asn F1AP-PDU-Contents.asn F1AP-PDU-Descriptions.asn</span><br></pre></td></tr></table></figure><h4 id="5-编译，运行测试"><a href="#5-编译，运行测试" class="headerlink" title="5 编译，运行测试"></a>5 编译，运行测试</h4><p>最后就是编译和运行，具体怎么编译和运行，还是可以参考之前那篇分享 <a href="http://benenfeng.com/2019/08/10/build-wireshark/">Ubuntu 16.04 下源码编译运行wireshark</a>。</p><p>最后我们展示一下更新前和更新后对 F1AP 中 IAB Procedures messages 解析。</p><p>更新前<br><img src="/images/wireshark-f1ap1.png" alt="before"></p><p>更新后<br><img src="/images/wireshark-f1ap2.png" alt="after updating"></p><p>对于E1AP，XnAP，X2AP, S1AP 和 NGAP 等采用ASN.1 PER 编码的协议，可以采用相同方式进行更新。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCAP File Structure Analysis</title>
      <link href="/2020/01/14/pcap-file/"/>
      <url>/2020/01/14/pcap-file/</url>
      
        <content type="html"><![CDATA[<h4 id="PCAP-File-Structure-Analysis"><a href="#PCAP-File-Structure-Analysis" class="headerlink" title="PCAP File Structure Analysis"></a>PCAP File Structure Analysis</h4><p>This analysis is based on wireshark source code. </p><p>The general structure of pcap file is show in the following: </p><table><thead><tr><th>pcap file header</th><th>packet header 1</th><th>packet data 1</th><th>packet header 2</th><th>packet data 2</th><th>… packet header n</th><th>… packet data</th></tr></thead><tbody><tr><td>24 bytes</td><td>16 bytes</td><td>..</td><td>16 bytes</td><td>…</td><td>16 bytes</td><td>…</td></tr></tbody></table><p> A pcap file includes a pcap file header field and some records. record field includes record header and packet data.<br> The detail about file header and record are introduced as following.</p><h5 id="PCAP-File-Header"><a href="#PCAP-File-Header" class="headerlink" title="PCAP File Header"></a>PCAP File Header</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcap_hdr</span> &#123;</span></span><br><span class="line">  guint32 magic  <span class="comment">/* magic */</span></span><br><span class="line">  guint16 version_major;  <span class="comment">/* major version number */</span></span><br><span class="line">  guint16 version_minor;  <span class="comment">/* minor version number */</span></span><br><span class="line">  gint32  thiszone; <span class="comment">/* GMT to local correction */</span></span><br><span class="line">  guint32 sigfigs;  <span class="comment">/* accuracy of timestamps */</span></span><br><span class="line">  guint32 snaplen;  <span class="comment">/* max length of captured packets, in octets */</span></span><br><span class="line">  guint32 network;  <span class="comment">/* data link type */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>According to the wireshark code, pcap file header include 7 fields. Details about that fields are given in the following table.</p><table><thead><tr><th>Fields</th><th>Length</th><th>Description</th></tr></thead><tbody><tr><td>magic</td><td>4 Bytes</td><td>to record the start of file. default value is 0xa1b2c3d4 or 0xd4c3b2a1</td></tr><tr><td>version_major</td><td>2 Bytes</td><td>the major version number of the pcap file. default value is 0x0200</td></tr><tr><td>version_minor</td><td>2 Bytes</td><td>the minor version number of the pcap file. default value is 0x0400</td></tr><tr><td>thiszone</td><td>4 Bytes</td><td>the local timestamps,  if use GMT, the value is usually 0x00000000</td></tr><tr><td>sigfigs</td><td>4 Bytes</td><td>the accuracy of timestamps. the value is usually 0x00000000</td></tr><tr><td>snaplen</td><td>4 Bytes</td><td>the max length of captured packets</td></tr><tr><td>network</td><td>4 Bytes</td><td>data link type. such as Ethernet, 802.5 Token Ring, ARCnet and so on</td></tr></tbody></table><h5 id="PCAP-Packet-Header"><a href="#PCAP-Packet-Header" class="headerlink" title="PCAP Packet Header"></a>PCAP Packet Header</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcaprec_hdr</span> &#123;</span></span><br><span class="line">  guint32 ts_sec;   <span class="comment">/* timestamp seconds */</span></span><br><span class="line">  guint32 ts_usec;  <span class="comment">/* timestamp microseconds (nsecs for PCAP_NSEC_MAGIC) */</span></span><br><span class="line">  guint32 incl_len; <span class="comment">/* number of octets of packet saved in file */</span></span><br><span class="line">  guint32 orig_len; <span class="comment">/* actual length of packet */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>According to the wireshark code, pcap file header include 4 fields. Details about that fields are given in the following table.</p><table><thead><tr><th>Fields</th><th>Length</th><th>Description</th></tr></thead><tbody><tr><td>ts_sec</td><td>4 Bytes</td><td>the timestamp seconds</td></tr><tr><td>ts_usec</td><td>4 Bytes</td><td>the  timestamp microseconds</td></tr><tr><td>incl_len</td><td>4 Bytes</td><td>the number of octets of packet saved in file, not including packet header.</td></tr><tr><td>orig_len</td><td>4 Bytes</td><td>the actual length of packet</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述 Java 注解</title>
      <link href="/2019/09/15/java-annotation/"/>
      <url>/2019/09/15/java-annotation/</url>
      
        <content type="html"><![CDATA[<h2 id="简述-Java-注解"><a href="#简述-Java-注解" class="headerlink" title="简述 Java 注解"></a>简述 Java 注解</h2><h4 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h4><p>Java 注解可以在编译、类加载和运行时被读取和执行一些处理。通过Java注解可以在不改变原有代码和逻辑的情况下进行一些其他的补充操作。Java 注解可以理解一种特殊意义的注释，然后通过其它代码的解析，补充原代码的操作，如果没有其它代码的解析，注解不会影响原代码的功能。</p><p>通常定义注解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="什么是元注解"><a href="#什么是元注解" class="headerlink" title="什么是元注解"></a>什么是元注解</h4><p>元注解就是用来修饰注解的注解, 是一种基础注解，通常用在定义注解上面，就是注解的注解，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 中的元注解有 <strong>@Target</strong>、<strong>@Retention</strong>、<strong>@Documented</strong>、<strong>@Inherited</strong>、<strong>@Repeatable</strong>。</p><ul><li>@Target：指示注释类型所适用的程序元素的种类</li><li>@Retention：注解的保留期即生命周期</li><li>@Documented：将注解元素包含在 JavaDoc 文档中</li><li>@Inherited：允许子类继承超类的注解</li><li>@Repeatable： 可重复的注解</li></ul><h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><p>@Target：指示注释类型所适用的程序元素的种类, 例如方法、类或者属性上面。@Target 有如下几种取值：</p><ul><li>ElementType.ANNOTATION_TYPE 作用在注解上面</li><li>ElementType.CONSTRUCTOR 对构造方法进行注解</li><li>ElementType.FIELD 对属性进行注解</li><li>ElementType.LOCAL_VARIABLE 对局部变量进行注解</li><li>ElementType.METHOD 对方法进行注解</li><li>ElementType.PACKAGE 对一个包进行注解</li><li>ElementType.PARAMETER 对一个方法内的参数进行注解</li><li>ElementType.TYPE 给类、接口、枚举注解</li></ul><h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><p>@Retention：注解的保留期即生命周期。 @Retention 有如下几种取值：</p><ul><li>RetentionPolicy.SOURCE：只保留在源码阶段，当前注解编译期可见</li><li>RetentionPolicy.CLASS：会写入 class 文件 但是类加载的时候会被丢弃，虚拟机不需要保存</li><li>RetentionPolicy.RUNTIME：运行时有效，会在虚拟机中保留，通过放射可以获取，非常常用</li></ul><h5 id="Documented："><a href="#Documented：" class="headerlink" title="@Documented："></a>@Documented：</h5><p>它的作用就是将注解元素包含在 JavaDoc 文档中。</p><h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><p>@Inherited 说的不是注解本身的继承，而且被注解注解过的类的继承问题，如果超类被@Father 注解过，<br>而且@Father 被@Inherited 注解过，如果子类继承了超类，并且子类没有被其它注解注解过，那么子类继承了超类的@Father 注解。</p><h5 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h5><p>@Repeatable 字面意思是可重复的，例如生活中，一个人可能扮演多个角色，既是父亲又是丈夫，也可能一个人会多种技能，既会写代码又会开滴滴，同时还会做饭。<br>例如一本书既包含前端知识，又包含后端知识， 等等例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Target</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Persons &#123;</span><br><span class="line">  Person[] value();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable</span>(Persons<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">role</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Person</span>(role=<span class="string">"Father"</span>)</span><br><span class="line"><span class="meta">@Person</span>(role=<span class="string">"Husband"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">"Li San"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h4><p>注解的属性是注解的成员变量，如上例中的 role 就是@Person 注解的属性， 可以通过上面的赋值方式进行赋值 <code>@Person(role=”Father)</code>，<br>当然如果有多个属性，可以用逗号隔开,加入@Person 里面还有一个属性是skill，就可以这样赋值<code>@Person(role=&quot;Father&quot;, skill=&quot;cook&quot;)</code></p><p>Java 注解中支持的属性有8种基本类型(int short boolen…)、Sting、 Class、 Enum、 Annotation 和 这些类型的数组。不支持Integer这种类。</p><h4 id="内置的注解"><a href="#内置的注解" class="headerlink" title="内置的注解"></a>内置的注解</h4><p>下面我们介绍几种常用的内置注解</p><p><strong>@Deprecated：</strong> @Deprecated用来描述在当前系统中已经被废弃不推荐使用的类或方法等。</p><p><strong>@Override：</strong>  主要是用来校验当前被标注的方法是否为重写方法，只作用于ElementType.METHOD。</p><p><strong>@SuppressWarnings：</strong> 过滤掉编译时编译器产生的警告信息。</p><p><strong>@FunctionalInterface：</strong> 函数式接口的注解，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义注解与解析"><a href="#自定义注解与解析" class="headerlink" title="自定义注解与解析"></a>自定义注解与解析</h4><p>这里面我们定义一个@BookTopic 的注解，用来给Book类进行说明。<strong>@BookTopic</strong> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.benen.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BookTopic &#123;</span><br><span class="line"></span><br><span class="line">  String[] value() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Book</strong>类和测试如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.benen.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@BookTopic</span>(value = &#123;<span class="string">"Java"</span>, <span class="string">"Spring"</span>, <span class="string">"SpringBoot"</span>&#125;)</span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookInfo</span><span class="params">(String bookName, <span class="keyword">int</span> bookPrice)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"书名： "</span> + bookName + <span class="string">" 价格： "</span> + bookPrice);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    Book book = <span class="keyword">new</span> Book();</span><br><span class="line">    Class&lt;Book&gt; c = Book<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Method mBookInfo = c.getMethod(<span class="string">"bookInfo"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    iterator(mBookInfo);</span><br><span class="line">    mBookInfo.invoke(book, <span class="keyword">new</span> Object[]&#123;<span class="string">"Spring Boot 编程思想"</span>, <span class="number">60</span>&#125;);</span><br><span class="line">    printAllAnnotation(mBookInfo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iterator</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(method.isAnnotationPresent(BookTopic<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">      BookTopic myAnnotation = method.getAnnotation(BookTopic<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      String[] values = myAnnotation.value();</span><br><span class="line">      System.out.printf(<span class="string">"这本书关于: "</span>);</span><br><span class="line">      <span class="keyword">for</span> (String str:values)</span><br><span class="line">        System.out.printf(str + <span class="string">" "</span>);</span><br><span class="line">      System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAllAnnotation</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">    System.out.println(method.getName() + <span class="string">"方法包含的注解有："</span>);</span><br><span class="line">    Annotation[] annotations = method.getAnnotations();</span><br><span class="line">    <span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">      System.out.println(annotation);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这本书关于: Java Spring SpringBoot </span><br><span class="line">书名： Spring Boot 编程思想 价格： <span class="number">60</span></span><br><span class="line">bookInfo方法包含的注解有：</span><br><span class="line"><span class="meta">@com</span>.benen.annotation.BookTopic(value=[Java, Spring, SpringBoot])</span><br><span class="line"><span class="meta">@java</span>.lang.Deprecated()</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Java 注解是对原代码的一种补充，可以编写出更灵活的代码， 通常注解主要给编译器及工具类型的软件用的。<br>由于注解的提取需要借助于 Java 的反射机制，而反射机制又比较慢和脆弱，所以需要谨慎使用Java 注解。</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="https://www.runoob.com/w3cnote/java-annotation.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/java-annotation.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij 自动生成Copyright 和 LF CRLF的默认选择</title>
      <link href="/2019/09/12/intellij-copyright/"/>
      <url>/2019/09/12/intellij-copyright/</url>
      
        <content type="html"><![CDATA[<h3 id="Intellij-自动生成Copyright-和-LF-CRLF的默认选择"><a href="#Intellij-自动生成Copyright-和-LF-CRLF的默认选择" class="headerlink" title="Intellij 自动生成Copyright 和 LF CRLF的默认选择"></a>Intellij 自动生成Copyright 和 LF CRLF的默认选择</h3><h4 id="Intellij-自动生成Copyright"><a href="#Intellij-自动生成Copyright" class="headerlink" title="Intellij 自动生成Copyright"></a>Intellij 自动生成Copyright</h4><ol><li>File-&gt;Settings… </li><li>Editor -&gt; File and Code Templates, 添加你的Copyright<br><img src="/images/intellij-copyright1.png" alt="intellij-copyright1.png"></li></ol><ol start="3"><li>File and Code Templates -&gt; Files -&gt; Class,  加入 <code>#parse(your copyright.java)</code><br><img src="/images/intellij-copyright2.png" alt="intellij-copyright2.png"></li></ol><h4 id="LR-CRLF-选择"><a href="#LR-CRLF-选择" class="headerlink" title="LR CRLF 选择"></a>LR CRLF 选择</h4><ol><li>File-&gt;Settings… </li><li>Editor -&gt; Code Style -&gt; Line separator: 选择 Unix and OS X<br><img src="/images/intellij-lr.png" alt="image.png"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述 Java 反射</title>
      <link href="/2019/09/07/java-reflect/"/>
      <url>/2019/09/07/java-reflect/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/sky1.jpg" alt="image"></p><h2 id="简述-Java-反射"><a href="#简述-Java-反射" class="headerlink" title="简述 Java 反射"></a>简述 Java 反射</h2><p>反射即在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息及动态调用对象方法的功能叫Java的反射机制。</p><h3 id="反射机制常用的功能："><a href="#反射机制常用的功能：" class="headerlink" title="反射机制常用的功能："></a>反射机制常用的功能：</h3><ul><li>在运行中分析类的能力和属性</li><li>在运行中构造任意类的对象</li><li>在运行时调用一个对象的方法和属性</li><li>修改构造函数、方法和属性的可见性</li><li>用于生成动态代理</li></ul><h3 id="反射机制相关的-Java-类"><a href="#反射机制相关的-Java-类" class="headerlink" title="反射机制相关的 Java 类"></a>反射机制相关的 Java 类</h3><ul><li><p>Class类：代表类的实体，在运行的Java应用程序中表示类和接口。 </p></li><li><p>Field类：代表类的成员属性。</p></li><li><p>Method类：代表类的方法。</p></li><li><p>Constructor类：代表类的构造方法。</p></li><li><p>Array类：提供了动态创建数组，以及访问数组的元素的静态方法。</p></li></ul><h4 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h4><p>在程序运行期间，Java 运行时系统为所有对象维护一个被称为运行时的标识，这个信息跟踪每个对象所属的类，可以通过专门的 Java 类访问这些信息，保存这些信息的类就是 Class。<br>Java 中，每个 class 都有一个对应的 Class 对象， 用于表示这个类的类型信息。</p><p>Class 类相关的常用的方法：</p><ul><li><p>getName()：获得类的完整名字。 </p></li><li><p>getFields()：获得类的public类型的属性。</p></li><li><p>getDeclaredFields()：获得类的所有属性。</p></li><li><p>getMethods()：获得类的public类型的方法。</p></li><li><p>getDeclaredMethods()：获得类的所有方法。</p></li><li><p>getMethod(String name, Class[] parameterTypes)：获得类的特定方法，name参数指定方法的名字，parameterTypes参数指定方法的参数类型。</p></li><li><p>getConstrutors()：获得类的public类型的构造方法。</p></li><li><p>getConstrutor(Class[] parameterTypes)：获得类的特定构造方法，parameterTypes参数指定构造方法的参数类型。</p></li></ul><h4 id="Field-类"><a href="#Field-类" class="headerlink" title="Field 类"></a>Field 类</h4><p>Field 代表类的成员属性， 常用的方法如下：</p><ul><li>equals(Object obj) 属性与obj相等则返回true</li><li>get(Object obj) 获得obj中对应的属性值</li><li>set(Object obj, Object value)    设置obj中对应属性值</li></ul><h4 id="Method-类"><a href="#Method-类" class="headerlink" title="Method 类"></a>Method 类</h4><p>Method 代表类的方法，常用方法如下：</p><ul><li>invoke(Object obj, Object… args)    传递object对象及参数调用该对象对应的方法</li></ul><h4 id="Constructor-类"><a href="#Constructor-类" class="headerlink" title="Constructor 类"></a>Constructor 类</h4><p>Constructor 代表类的构造方法， 常用方法如下：</p><ul><li>newInstance()：通过类的不带参数的构造方法创建这个类的一个对象。</li></ul><h3 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h3><p>我们先定义一个 <strong>Person 类</strong>， 然后通过反射操作这个类来演示这个反射的使用。</p><h5 id="Person-Class"><a href="#Person-Class" class="headerlink" title="Person Class"></a>Person Class</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.benen.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"Bruce"</span>;</span><br><span class="line">        <span class="keyword">this</span>.sex = <span class="string">"man"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generalMethod</span><span class="params">(String in)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"reflectMethod, input is :"</span> + in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">            <span class="string">"age="</span> + age +</span><br><span class="line">            <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="反射demo类-ReflectDemo："><a href="#反射demo类-ReflectDemo：" class="headerlink" title="反射demo类 ReflectDemo："></a>反射demo类 ReflectDemo：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.benen.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERSON = <span class="string">"com.benen.reflect.Person"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * test creating object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectNewInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class personClass = Class.forName(ReflectDemo.PERSON);</span><br><span class="line">      Object obj = personClass.newInstance();</span><br><span class="line">      Person person = (Person) obj;</span><br><span class="line">      person.setAge(<span class="number">15</span>);</span><br><span class="line">      person.setName(<span class="string">"Evan"</span>);</span><br><span class="line">      person.setSex(<span class="string">"man"</span>);</span><br><span class="line">      System.out.println(<span class="string">"reflect new instance person："</span> + person.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * test private constructor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectPrivateConstructor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class&lt;?&gt; personClass = Class.forName(ReflectDemo.PERSON);</span><br><span class="line">      Constructor&lt;?&gt; declaredConstructorBook = personClass.getDeclaredConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">      declaredConstructorBook.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      Object obj = declaredConstructorBook.newInstance(<span class="number">27</span>, <span class="string">"Danny"</span>,<span class="string">"man"</span>);</span><br><span class="line">      Person person = (Person) obj;</span><br><span class="line">      System.out.println(<span class="string">"reflectPrivateConstructor person = "</span> + person.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * test method.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class&lt;?&gt; personClass = Class.forName(ReflectDemo.PERSON);</span><br><span class="line">      Method personMethod = personClass.getMethod(<span class="string">"generalMethod"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      personMethod.invoke((Person)personClass.newInstance(), <span class="string">"Test Method Reflect"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * get field.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class&lt;?&gt; personClass = Class.forName(ReflectDemo.PERSON);</span><br><span class="line">      Field field = personClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">      field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      String name = (String) field.get(personClass.newInstance());</span><br><span class="line">      System.out.println(<span class="string">"reflectPrivateField name: "</span> + name);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ReflectDemo.reflectNewInstance();</span><br><span class="line"></span><br><span class="line">      ReflectDemo.reflectPrivateConstructor();</span><br><span class="line"></span><br><span class="line">      ReflectDemo.reflectField();</span><br><span class="line"></span><br><span class="line">      ReflectDemo.reflectMethod();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果输出如下："><a href="#结果输出如下：" class="headerlink" title="结果输出如下："></a>结果输出如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reflect <span class="keyword">new</span> instance person：Person&#123;age=<span class="number">15</span>, name=<span class="string">'Evan'</span>, sex=<span class="string">'man'</span>&#125;</span><br><span class="line">reflectPrivateConstructor person = Person&#123;age=<span class="number">27</span>, name=<span class="string">'Danny'</span>, sex=<span class="string">'man'</span>&#125;</span><br><span class="line">reflectPrivateField name: Bruce</span><br><span class="line">reflectMethod, input is :Test Method Reflect</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>反射机制可以在运行时查看域和方法，可以编写出更灵活更通用的代码。但是反射也是很脆弱的，编译器很难发现程序中的问题，只有在运行时才能发现错误并抛出异常。</p><p>以上就是java反射用法的基本理解，若有错误或者不当之处，还请大家批评指正！</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>Java 核心技术卷I</li><li><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a>ƒ∂</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述 Java 回调</title>
      <link href="/2019/09/03/java-callback/"/>
      <url>/2019/09/03/java-callback/</url>
      
        <content type="html"><![CDATA[<h2 id="简述-Java-回调"><a href="#简述-Java-回调" class="headerlink" title="简述 Java 回调"></a>简述 Java 回调</h2><p>回调的思想就是： 类A的方法a()调用类B的b()方法 类B的b()方法执行完毕主动调用类A的callback()方法。<br>考虑上面的描述太抽象，我们用一个具体的例子来讲述回调。</p><p>例子： 部门经理想搞一个部门活动，但是不知道什么时间比较合适，就安排自己的秘书去调查安排，秘书调查完以后通知经理具体的时间搞活动大家都方便。</p><p>在上面这个例子中，经理就是A类，让秘书找时间就是方法a(), 秘书就是B类，秘书找具体的时间就是方法b(), 秘书找到具体的时间通知经理就是callback()方法。</p><p>我们给出代码示例可能就更好懂一点：</p><p><strong>回调接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.benen.callback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">book</span><span class="params">(Date date)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经理类实现回调接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.benen.callback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">implements</span> <span class="title">CallBack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Secretary secretary;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(Secretary secretary)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.secretary = secretary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"the time of the team building is "</span> + date);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">plan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Manager plans to hold team building"</span>);</span><br><span class="line">    secretary.search(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>秘书类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.benen.callback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Secretary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(CallBack callBack)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Secretary starts to search .."</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">      System.out.println(<span class="string">"Secretary is doing ..."</span>);</span><br><span class="line">      callBack.book(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"finished ..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.benen.callback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Secretary secretary = <span class="keyword">new</span> Secretary();</span><br><span class="line">    Manager manager = <span class="keyword">new</span> Manager(secretary);</span><br><span class="line">    manager.plan();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manager plans to hold team building</span><br><span class="line">Secretary starts to search ..</span><br><span class="line">Secretary is doing ...</span><br><span class="line">the time of the team building is Tue Sep <span class="number">03</span> <span class="number">22</span>:<span class="number">32</span>:<span class="number">57</span> CST <span class="number">2019</span></span><br><span class="line">finished ...</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>定义回调接口类 CallBack</li><li>类A 实现回调接口，并且包含类B的对象</li><li>类B 方法b(CallBack c)</li><li>A调用B对象的b(CallBack c)方法，并将自身做参数传给b(CallBack c)方法， 最后在b(CallBack c)中调用回调方法。</li></ul><p>以上就是java回调用法的大致流程，若有错误或者不当之处，还请大家批评指正！</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 中 static 和 final 关键字的用法</title>
      <link href="/2019/08/31/usage-of-final-and-static/"/>
      <url>/2019/08/31/usage-of-final-and-static/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-中-static-和-final-关键字的用法"><a href="#Java-中-static-和-final-关键字的用法" class="headerlink" title="Java 中 static 和 final 关键字的用法"></a>Java 中 static 和 final 关键字的用法</h2><h3 id="staitc-关键字的用法"><a href="#staitc-关键字的用法" class="headerlink" title="staitc 关键字的用法"></a>staitc 关键字的用法</h3><p>从static字面意思就是“静态的”， java 中静态是相对普通成员（非static)。 </p><h4 id="static-关键字主要两个作用："><a href="#static-关键字主要两个作用：" class="headerlink" title="static 关键字主要两个作用："></a><strong>static 关键字主要两个作用：</strong></h4><ul><li><ol><li>为某特定数据类型或者对象分配单一的存储空间，于创造多少对象无关；</li></ol></li><li><ol start="2"><li>将方法或者属性与类关联绑定，而不是与类对应的对象关联一起，就是在不实例化对象的情况下也可以直接调用类属性和类方法。</li></ol></li></ul><p>static 主要用法包含成员属性、成员方法、代码块和内部类：</p><h5 id="1-static-成员变量"><a href="#1-static-成员变量" class="headerlink" title="1. static 成员变量"></a>1. static 成员变量</h5><p>   java 中没有全局变量的概念，用static 修饰的变量可以起到全局变量的效果。静态变量属于类，在内存中只有一份，所有该类的对象实例都指向这个内存地址。只要类被加载，静态变量就会被分配内存空间，就可以使用了。使用实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.benen.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> staticCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> nonStaticCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TestStatic testStatic1 = <span class="keyword">new</span> TestStatic();</span><br><span class="line">    System.out.println(<span class="string">"testStatic1 nonStaticCount: "</span> +  testStatic1.nonStaticCount++);</span><br><span class="line">    System.out.println(<span class="string">"TestStatic staticCount: "</span> + TestStatic.staticCount++);</span><br><span class="line">    TestStatic testStatic2 = <span class="keyword">new</span> TestStatic();</span><br><span class="line">    System.out.println(<span class="string">"testStatic2 nonStaticCount: "</span> +  testStatic2.nonStaticCount);</span><br><span class="line">    System.out.println(<span class="string">"TestStatic staticCount: "</span> + TestStatic.staticCount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line"></span><br><span class="line">testStatic1 nonStaticCount: <span class="number">0</span></span><br><span class="line">TestStatic staticCount: <span class="number">0</span></span><br><span class="line">testStatic2 nonStaticCount: <span class="number">0</span></span><br><span class="line">TestStatic staticCount: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>从上例可知，静态的变量只有一个属于类。需要注意的是局部变量不能用static 修饰。</p><h5 id="2-static-成员方法"><a href="#2-static-成员方法" class="headerlink" title="2. static 成员方法"></a>2. static 成员方法</h5><p>  static 方法是类的方法，不需要创建对象实例就可以被调用，和static变量类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.benen.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    System.out.println(input);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TestStatic.print(<span class="string">"This is a static method!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-static-代码块"><a href="#3-static-代码块" class="headerlink" title="3. static 代码块"></a>3. static 代码块</h5><p>static 代码块在类中独立于成员属性和成员方法的代码块。加载类是执行静态代码块，如果有多个静态代码块，则依次执行。静态代码块只会执行依次，就是在类加载的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.benen.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"this is a static block!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"This is a constructor!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">    <span class="keyword">new</span> TestStatic();</span><br><span class="line">    <span class="keyword">new</span> TestStatic();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> is a <span class="keyword">static</span> block!</span><br><span class="line">----------</span><br><span class="line">This is a constructor!</span><br><span class="line">This is a constructor!</span><br></pre></td></tr></table></figure><h5 id="4-static-内部类"><a href="#4-static-内部类" class="headerlink" title="4. static 内部类"></a>4. static 内部类</h5><p>静态内部类就是被声明static的内部类，不依赖外部类实例对象对象，静态内部类只能访问外部类的静态属性和静态方法，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.benen.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> outer = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outerMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"out static method."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"outer: "</span> + outer);</span><br><span class="line">      outerMethod();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TestStatic.StaticInner inner = <span class="keyword">new</span> TestStatic.StaticInner();</span><br><span class="line">    inner.innerMethod();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"></span><br><span class="line">outer: <span class="number">1</span></span><br><span class="line">out <span class="keyword">static</span> method.</span><br></pre></td></tr></table></figure><h3 id="final-关键字的用法"><a href="#final-关键字的用法" class="headerlink" title="final 关键字的用法"></a>final 关键字的用法</h3><ul><li>final 修饰的类叫最终类，该类不能被继承。final 不能修饰抽象类，因为被final修饰的抽象类不能继承，而抽象类不能被实例化。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><p>若有错误或者不当之处，还请大家批评指正！</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark 常用数据结构和方法分析</title>
      <link href="/2019/08/29/wireshark-resource-analysis/"/>
      <url>/2019/08/29/wireshark-resource-analysis/</url>
      
        <content type="html"><![CDATA[<h3 id="Wireshark-常用数据结构和方法分析"><a href="#Wireshark-常用数据结构和方法分析" class="headerlink" title="Wireshark 常用数据结构和方法分析"></a>Wireshark 常用数据结构和方法分析</h3><h4 id="header-field-info"><a href="#header-field-info" class="headerlink" title="header_field_info"></a>header_field_info</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">header_field_info</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>      *name;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>      *abbrev;</span><br><span class="line">    <span class="keyword">enum</span> ftenum     type;</span><br><span class="line">    <span class="keyword">int</span>             <span class="built_in">display</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span>      *strings;</span><br><span class="line">    guint64         bitmask;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>      *blurb;</span><br><span class="line">    .....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面依次介绍各个属性的含义：</p><ul><li><strong>*name</strong>: 表示字段名称的字符串。这就是名字将出现在图形协议树中。它必须是非空的字符串。</li><li><strong>*abbrev</strong>: 带有字段缩写的字符串。缩写应该开始使用父协议的缩写，后跟一个点作为分隔器。例如，IP数据包中的“src”字段将具有“ip.src”作为缩写。如果，有多个级别的句点是可以接受的，例如，您的协议中有字段，然后再细分为子域。例如，TRMAC有多个错误字段，因此缩写遵循这种模式：“trmac.errors.iso”，“trmac.errors.noniso”等。缩写也是过滤器的标识符，同样为非空字符串。</li><li><strong>type</strong>: 此字段是用来标记该域的值得类型，常用的类型有：<ul><li>FT_BOOLEN: bool 型， 0 表示 false, 1 表示 true</li><li>FT_CHAR: 一个8bit 的 char 字符</li><li>FT_UINT8: 8bit 无符号整型</li><li>FT_INT8: 8bit 有符号整型</li><li>…</li></ul></li><li><strong>display</strong>: 显示字段主要指明数据域展示的编码方式ASCLL、10进制、二进制还是16进制</li><li><strong>*strings</strong>: 用于某些枚举数据类型</li><li><strong>bitmask</strong>: 如果该字段是位域，那么位掩码就是掩码当与一个值进行AND运算时，只留下制作该字段所需的位</li><li><strong>*blurb</strong>: 用于对数据域的描述，可以为null表示，不能用“” 表示。</li></ul><p>未完。。。</p><p>若有错误或者不当之处，还请大家批评指正！</p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized 几种用法</title>
      <link href="/2019/08/24/usage-of-synchronized/"/>
      <url>/2019/08/24/usage-of-synchronized/</url>
      
        <content type="html"><![CDATA[<h2 id="synchronized-几种用法"><a href="#synchronized-几种用法" class="headerlink" title="synchronized 几种用法"></a>synchronized 几种用法</h2><p>synchronized 是 Java 内建的同步机制 （关键字），当一个线程已经获取当前锁时，其他试图获取的线程只能等待或者阻塞在那里。这里介绍synchronized的几种用法：</p><ul><li><ol><li>代码块加锁</li></ol></li><li><ol start="2"><li>普通方法加锁</li></ol></li><li><ol start="3"><li>静态方法加锁</li></ol></li></ul><h4 id="synchronized-修饰代码块"><a href="#synchronized-修饰代码块" class="headerlink" title="synchronized 修饰代码块"></a>synchronized 修饰代码块</h4><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.benen.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedCodeBlock</span> <span class="keyword">implements</span>  <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> increment = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">" number: "</span> + ++increment);</span><br><span class="line">          Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    add();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedCodeBlock block = <span class="keyword">new</span> SynchronizedCodeBlock();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 1"</span>);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 2"</span>);</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 3"</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t3.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">thread <span class="number">1</span> number: <span class="number">1</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">2</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">3</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">4</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">5</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">6</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">7</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">8</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">9</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">10</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">11</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">12</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">13</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">14</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">15</span></span><br></pre></td></tr></table></figure><p>明确对象加锁的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="synchronized-修饰普通方法"><a href="#synchronized-修饰普通方法" class="headerlink" title="synchronized 修饰普通方法"></a>synchronized 修饰普通方法</h4><p>synchronized 修饰普通方法就是在方法前面加synchronized, demo 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.benen.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedGeneralMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> increment = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">" number: "</span> + ++increment);</span><br><span class="line">      Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedGeneralMethod block = <span class="keyword">new</span> SynchronizedGeneralMethod();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 1"</span>);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 2"</span>);</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 3"</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t3.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">thread <span class="number">2</span> number: <span class="number">1</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">2</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">3</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">4</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">5</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">6</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">7</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">8</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">9</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">10</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">11</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">12</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">13</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">14</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="synchronized-修饰静态方法"><a href="#synchronized-修饰静态方法" class="headerlink" title="synchronized 修饰静态方法"></a>synchronized 修饰静态方法</h4><p>synchronized 修饰静态方法就是在方法前面加synchronized, demo 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.benen.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedStaticMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> increment = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">" number: "</span> + ++increment);</span><br><span class="line">      Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedStaticMethod block = <span class="keyword">new</span> SynchronizedStaticMethod();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 1"</span>);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 2"</span>);</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(block, <span class="string">"thread 3"</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t3.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">thread <span class="number">1</span> number: <span class="number">1</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">2</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">3</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">4</span></span><br><span class="line">thread <span class="number">1</span> number: <span class="number">5</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">6</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">7</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">8</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">9</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">10</span></span><br><span class="line">thread <span class="number">2</span> number: <span class="number">11</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">12</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">13</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">14</span></span><br><span class="line">thread <span class="number">3</span> number: <span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><ul><li><strong>对象锁：</strong> synchronized 关键字加在普通方法或者对象上，如果作用的的对象不是静态的，则取得锁的是对象 。</li><li><strong>类锁：</strong> synchronized 关键字作用在静态方法，则取得锁的是类，该类的所有对象竞争同一把锁。</li></ul><p>若有错误或者不当之处，还请大家批评指正！</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 常用命令</title>
      <link href="/2019/08/10/hexo-common-commands/"/>
      <url>/2019/08/10/hexo-common-commands/</url>
      
        <content type="html"><![CDATA[<h4 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new demo <span class="comment"># 生成demo</span></span><br></pre></td></tr></table></figure><h4 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">#生成静态文件</span></span><br></pre></td></tr></table></figure><h4 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s <span class="comment"># 本地开启hexo服务 默认端口4000</span></span><br></pre></td></tr></table></figure><h4 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d <span class="comment">#部署到远端</span></span><br></pre></td></tr></table></figure><h4 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除生成的静态文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04 下源码编译运行wireshark</title>
      <link href="/2019/08/10/build-wireshark/"/>
      <url>/2019/08/10/build-wireshark/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu-16-04-下源码编译运行wireshark"><a href="#Ubuntu-16-04-下源码编译运行wireshark" class="headerlink" title="Ubuntu 16.04 下源码编译运行wireshark"></a>Ubuntu 16.04 下源码编译运行wireshark</h2><h5 id="安装依赖文件"><a href="#安装依赖文件" class="headerlink" title="安装依赖文件"></a>安装依赖文件</h5><ul><li>apt update &amp;&amp; apt build-dep -y wireshark &amp;&amp; apt install -y git</li><li>apt install -y python3-ply quilt libsysemd-dev</li></ul><h5 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h5><ul><li>git clone –depth=1 <a href="https://code.wireshark.org/review/wireshark" target="_blank" rel="noopener">https://code.wireshark.org/review/wireshark</a></li></ul><h5 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h5><ol><li>mkdir wireshark-ninja </li><li>cd wireshark-ninjia</li><li>cmake -G Ninja ../wireshark </li><li>ninja </li><li>sudo ./run/wireshark</li></ol><p>wireshark需要管理员权限，否则找不到网络设备接口。</p><p>若有错误或者不当之处，还请大家批评指正！</p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>艾文blog</title>
      <link href="/2019/08/10/demo/"/>
      <url>/2019/08/10/demo/</url>
      
        <content type="html"><![CDATA[<p>用了记录一些自己在工作中或者学习中遇到的问题或者想法。</p><p>由于能力有限，若有错误或者不当之处，还请大家批评指正！</p><p>未完…</p>]]></content>
      
      
      
        <tags>
            
            <tag> myself </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
